digraph "MTL::MTLThreadPool"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MTL::MTLThreadPool\n|- m_onMessage_mutex\l- m_num_threads\l- m_current_thread\l- worker\l|+ MTLThreadPool()\l+ ~MTLThreadPool()\l+ onMessage()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Class that implements a thread pool."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{MTL::MTLThreadManager\n|# m_threads\l# m_threads_mutex\l- m_sleep_time\l|+ MTLThreadManager()\l+ ~MTLThreadManager()\l+ run()\l+ suspend()\l+ resume()\l+ stop()\l+ clean_exit()\l+ force_exit()\l+ addThread()\l+ setSleepTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/def/classMTL_1_1MTLThreadManager.html",tooltip="Class that implements a thread manager."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{MTL::MTLRunnable\n|- threadIf\l|+ run()\l+ suspend()\l+ resume()\l+ stop()\l+ clean_exit()\l+ force_exit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/da7/classMTL_1_1MTLRunnable.html",tooltip="Runnable Interface."];
}
