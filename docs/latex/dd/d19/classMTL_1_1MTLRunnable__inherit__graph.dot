digraph "MTL::MTLRunnable"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MTL::MTLRunnable\n|- threadIf\l|+ run()\l+ suspend()\l+ resume()\l+ stop()\l+ clean_exit()\l+ force_exit()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Runnable Interface."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{MTL::MTLThread\n|- m_threadState\l- m_threadState_mutex\l- m_thread_ptr\l- m_runnable\l|+ MTLThread()\l+ ~MTLThread()\l+ run()\l+ suspend()\l+ resume()\l+ stop()\l+ clean_exit()\l+ force_exit()\l+ isRunning()\l+ join()\l+ getRunnableReference()\l+ getThreadState()\l+ setThreadState()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/df5/classMTL_1_1MTLThread.html",tooltip="Class that implements a thread."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{MTL::MTLThreadManager\n|# m_threads\l# m_threads_mutex\l- m_sleep_time\l|+ MTLThreadManager()\l+ ~MTLThreadManager()\l+ run()\l+ suspend()\l+ resume()\l+ stop()\l+ clean_exit()\l+ force_exit()\l+ addThread()\l+ setSleepTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/def/classMTL_1_1MTLThreadManager.html",tooltip="Class that implements a thread manager."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{MTL::MTLThreadPool\n|- m_onMessage_mutex\l- m_num_threads\l- m_current_thread\l- worker\l|+ MTLThreadPool()\l+ ~MTLThreadPool()\l+ onMessage()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d9b/classMTL_1_1MTLThreadPool.html",tooltip="Class that implements a thread pool."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{MTL::MTLWorkerThread\n|- m_sleep_time\l|+ MTLWorkerThread()\l+ ~MTLWorkerThread()\l+ run()\l+ suspend()\l+ resume()\l+ stop()\l+ clean_exit()\l+ force_exit()\l+ setSleepTime()\l# processMessage()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dfb/classMTL_1_1MTLWorkerThread.html",tooltip="Class that implements a Worker Thread."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{MyWorker\n||+ MyWorker()\l+ ~MyWorker()\l+ processMessage()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d13/classMyWorker.html",tooltip=" "];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{MyWorker1\n||+ MyWorker1()\l+ ~MyWorker1()\l+ processMessage()\l+ clean_exit()\l+ MyWorker1()\l+ ~MyWorker1()\l+ processMessage()\l+ clean_exit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d0c/classMyWorker1.html",tooltip=" "];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{MyWorker2\n||+ MyWorker2()\l+ ~MyWorker2()\l+ processMessage()\l+ clean_exit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/da2/classMyWorker2.html",tooltip=" "];
  Node5 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{MyWorker3\n||+ MyWorker3()\l+ ~MyWorker3()\l+ processMessage()\l+ clean_exit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d9f/classMyWorker3.html",tooltip=" "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{MyRunnable\n|- m_sharedMemory\l|+ MyRunnable()\l+ ~MyRunnable()\l+ run()\l+ stop()\l+ suspend()\l+ resume()\l+ clean_exit()\l+ force_exit()\l+ MyRunnable()\l+ ~MyRunnable()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d1c/classMyRunnable.html",tooltip=" "];
}
